{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAGMA,EACE,mCADFA,EAEG,0CAkEMC,MA/Df,WAEE,MAA0BC,mBAAS,IAAnC,mBAAMC,EAAN,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAMG,EAAN,KAAgBC,EAAhB,KAyBA,OAEE,qBAAKC,UAAU,MAAf,SACA,qBAAKA,UAAkC,oBAAfF,EAAQG,MAAwBH,EAAQG,KAAKC,KAAO,GACxE,WAAsB,MAD1B,SAEE,iCACE,qBAAKF,UAAY,aAAjB,SACE,uBACEG,KAAM,OAAOH,UAAU,aAAaI,YAAa,sBACjDC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAlCK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAK,UAAKnB,EAAL,qBAA0BG,EAA1B,+BAAsDH,IAC1DoB,MAAM,SAAAC,GAAG,OAAGA,EAAIC,UAChBF,MAAM,SAAAG,GACLjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA8Ba,oBAAhBlB,EAAQG,KACf,gCACA,sBAAKD,UAAU,eAAf,UACC,sBAAKA,UAAW,WAAhB,UAA4BF,EAAQqB,KAApC,KAA4CrB,EAAQsB,IAAIC,WACxD,sBAAKrB,UAAU,OAAf,UA7BW,SAACsB,GACnB,IAGIC,EAFM,CAAC,SAAW,SAAU,UAAY,YAAY,WAAY,SAAW,YAEjED,EAAEE,UACZC,EAAOH,EAAEI,UACTC,EALQ,CAAC,UAAY,WAAa,QAAU,QAAU,MAAQ,OAAS,OAAQ,SAAU,YAAc,WAAa,YAKrGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoBJE,CAAY,IAAIC,MAAvC,UAEH,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACEiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD1B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGqC,oBAG1C,WCnDEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1404d7ea.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\n\nconst api = {\n  key : \"cbf96360c4541fda84e57427791409ae\" ,\n  base : \"http://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const[query , setQuery] = useState('');\n  const[weather , setWeather] = useState('');\n\n  const search = evt => {\n    if(evt.key === \"Enter\"){\n      fetch (`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then( res=> res.json())\n      .then( result => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months= [\"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\", \"August\", \"September\" , \"November\" , \"December\"];\n    let days= [\"Sunday\" , \"Monday\", \"Tuesday\" , \"Wednesday\",\"Thursday\", \"Friday\" , \"Saturday\"];\n\n    let day= days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n\n    <div className=\"box\">\n    <div className={(typeof weather.main !=\"undefined\") ? ((weather.main.temp > 22\n    ) ? \"app warm\" : \"app\") : \"app\"}>\n      <main>\n        <div className = \"search-box\">\n          <input \n            type= \"text\" className=\"search-bar\" placeholder= \"Search Your City...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? ( \n          <div>\n          <div className=\"location-box\">\n           <div className= \"location\">{weather.name}, {weather.sys.country}</div>\n           <div className=\"date\">{dateBuilder(new Date())} </div>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"temp\"> \n           {Math.round(weather.main.temp)}Â°c\n          </div>\n          <div className=\"weather\">{weather.weather[0].description}</div>\n        </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}